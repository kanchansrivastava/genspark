# micro-1/Dockerfile

# Stage 1: Build the Go application
FROM golang:1.23.4-alpine3.21 AS builder

WORKDIR /app

# Set the target OS and architecture
ENV GOOS=linux
ENV GOARCH=amd64

# Copy go.mod and go.sum first to leverage layer caching
COPY go.mod go.sum ./
#if copy go.mod and go.sum before then run go mod tidy and download immediately
# it would cache the layer so both command would only run if there any changes in go.mod or go.sum
# Download and cache dependencies
RUN go mod download

# Run go mod tidy to ensure that dependencies are consistent
RUN go mod tidy

# Copy the source code into the container
COPY . .


# Build the Go application
RUN go build -o user-service .

# Stage 2: Create a lightweight runtime image
FROM alpine:latest

WORKDIR /app

# Copy the compiled binary from the previous stage
COPY --from=builder /app/user-service .

# Copy the migrations folder into the container
COPY --from=builder /app/internal/stores/postgres/migrations ./internal/stores/postgres/migrations
# Copy the .env file into the container
COPY .env .

EXPOSE 80
# Command to run the application
CMD ["./user-service"]


services:
    #########################################
      # Service Discovery
    #########################################
      consul:
        container_name: consul-service
        image: hashicorp/consul:1.20
        ports:
          - "8500:8500" # Consul UI
        networks:
          - web
        restart: always
    
    #########################################
      # Gateway Service Containers
    #########################################
      gateway-service:
        build: ./gateway-service
        container_name: gateway-service
        ports:
          - "80:80"
        depends_on:
          - consul
        networks:
          - web
    
    
    #######################################
    # User-Service containers
    #######################################
    
      user-service:
        build: ./user-service
        container_name: user-service
        ports:
          - "8081:80"
        depends_on:
          - consul
        networks:
          - web
    
    #######################################
    # User-Postgres containers
    #######################################
      user-postgres:
       image: postgres:16.3-alpine
       container_name: user-postgres
       restart: always
       environment:
         POSTGRES_USER: postgres
         POSTGRES_PASSWORD: postgres
         POSTGRES_DB: postgres
       ports:
         - "5433:5432"
       networks:
         - web
    
    #######################################
    # DB-UI containers
    ####################################### 
      adminer:
        image: adminer
        restart: always
        ports:
          - "8080:8080"
    #Containers connected to the same bridge network can communicate with each other
    networks:
      web:
        driver: bridge